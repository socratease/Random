#Write a method named crazy_sum(numbers) that takes an array of numbers. 
#crazy_sum should multiply each number in the array by its position in the array,
#and return the sum. Note that the first element in an array is index 0, 
#not index 1.
#Make sure your code works for arrays with repeats of the same number 
#(like [2, 3, 5, 2]). Hint: be careful about using Array#index; why?
"""
crazy_sum([2]) == 0 # (2*0)
crazy_sum([2, 3]) == 3 # (2*0) + (3*1)
crazy_sum([2, 3, 5]) == 13 # (2*0) + (3*1) + (5*2)
crazy_sum([2, 3, 5, 2]) == 19 # (2*0) + (3*1) + (5*2) + (2*3)
"""

def crazy_sum(numbers):
    sumlist = []
    counter = 0
    for i in numbers:
        sumlist.append(i * counter)
        counter += 1
    print sum(sumlist)

"""
Write a method square_nums that takes a number max and returns the 
number of perfect squares less than max. 
Do not use Math.sqrt(x) or x ** 0.5; 
we don't want you to calculate square roots for this problem. 
You will, however, want to find squares (x * x is fine).
square_nums(5) == 2
square_nums(10) == 3
square_nums(25) == 4
"""
def square_nums(max):
  squarelist = []
  for i in range(0,max):
    if (i * i) < max:
      squarelist.append(i * i)
    else:
      break
  return len(squarelist)
    
"""
Write a method crazy_nums that takes a number, max, 
and returns an array of the integers that

ARE less than max
AND ARE divisible by either three or five
BUT ARE NOT divisible by _both_ three and five
You should return the result in increasing order.

You may wish to use the modulo operation: 
5 % 2 returns the remainder when dividing 5 by 2: 1. 
If num is divisible by i, then num % i == 0.
crazy_nums(3) == []
crazy_nums(10) == [3, 5, 6, 9]
crazy_nums(20) == [3, 5, 6, 9, 10, 12, 18]
"""
def crazy_nums(max):
  crazynumlist = []
  for i in range(0, max):
    if i % 3 is 0 or i % 5 is 0:
      pass
    else:
      continue
    if i % 3 is 0 and i % 5 is 0:
      continue
    else:
      crazynumlist.append(i)
  return crazynumlist
  
